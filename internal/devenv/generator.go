package devenv

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// Generator handles the generation of devenv.nix files
type Generator struct {
	template *template.Template
}

// NewGenerator creates a new devenv.nix generator
func NewGenerator() (*Generator, error) {
	tmpl, err := template.New("devenv").Funcs(template.FuncMap{
		"formatValue": func(value interface{}) string {
			switch v := value.(type) {
			case string:
				// Check if it's a nix expression (starts with certain patterns)
				if strings.HasPrefix(v, "pkgs.") || strings.HasPrefix(v, "lib.") ||
					strings.HasPrefix(v, "[") || strings.HasPrefix(v, "{") ||
					strings.Contains(v, "=") {
					return v
				}
				return fmt.Sprintf(`"%s"`, v)
			case bool:
				return fmt.Sprintf("%t", v)
			case int, int32, int64:
				return fmt.Sprintf("%d", v)
			case float32, float64:
				return fmt.Sprintf("%f", v)
			default:
				return fmt.Sprintf(`"%v"`, v)
			}
		},
	}).Parse(devenvTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse devenv template: %w", err)
	}

	return &Generator{template: tmpl}, nil
}

// Generate creates a devenv.nix file from the given configuration
func (g *Generator) Generate(config *DevenvConfig, outputPath string) error {
	var buf bytes.Buffer

	if err := g.template.Execute(&buf, config); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	// Ensure directory exists
	dir := filepath.Dir(outputPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("failed to create directory %s: %w", dir, err)
	}

	// Write the file
	if err := os.WriteFile(outputPath, buf.Bytes(), 0644); err != nil {
		return fmt.Errorf("failed to write devenv.nix file: %w", err)
	}

	return nil
}

// GenerateString returns the devenv.nix content as a string
func (g *Generator) GenerateString(config *DevenvConfig) (string, error) {
	var buf bytes.Buffer

	if err := g.template.Execute(&buf, config); err != nil {
		return "", fmt.Errorf("failed to execute template: %w", err)
	}

	return buf.String(), nil
}

// validateConfig performs basic validation on the devenv configuration
func (g *Generator) validateConfig(config *DevenvConfig) error {
	if config == nil {
		return fmt.Errorf("config cannot be nil")
	}

	// Validate that at least one language is specified
	if len(config.Languages) == 0 {
		return fmt.Errorf("at least one language must be specified")
	}

	return nil
}

// devenvTemplate is the base template for devenv.nix files
const devenvTemplate = `# Generated by nixai devenv
# https://devenv.sh/
{
  # https://devenv.sh/packages/
  packages = [
{{- range .Packages }}
    {{ . }}
{{- end }}
  ];

{{- if .Languages }}
  # https://devenv.sh/languages/
  languages = {
{{- range $lang, $config := .Languages }}
    {{ $lang }} = {
{{- if eq (printf "%T" $config) "bool" }}
      enable = {{ $config }};
{{- else }}
{{- range $key, $value := $config }}
      {{ $key }} = {{ formatValue $value }};
{{- end }}
{{- end }}
    };
{{- end }}
  };
{{- end }}

{{- if .Services }}
  # https://devenv.sh/services/
  services = {
{{- range $service, $config := .Services }}
    {{ $service }} = {
{{- if eq (printf "%T" $config) "bool" }}
      enable = {{ $config }};
{{- else }}
{{- range $key, $value := $config }}
      {{ $key }} = {{ formatValue $value }};
{{- end }}
{{- end }}
    };
{{- end }}
  };
{{- end }}

{{- if .Scripts }}
  # https://devenv.sh/scripts/
  scripts = {
{{- range $name, $script := .Scripts }}
    {{ $name }} = {
{{- if eq (printf "%T" $script) "string" }}
      exec = "{{ $script }}";
{{- else }}
{{- range $key, $value := $script }}
      {{ $key }} = {{ formatValue $value }};
{{- end }}
{{- end }}
    };
{{- end }}
  };
{{- end }}

{{- if .Environment }}
  # https://devenv.sh/environment-variables/
  env = {
{{- range $key, $value := .Environment }}
    {{ $key }} = "{{ $value }}";
{{- end }}
  };
{{- end }}

{{- if .EnterShell }}
  # https://devenv.sh/scripts/
  enterShell = ''
    {{ .EnterShell }}
  '';
{{- end }}

{{- if .ExitShell }}
  exitShell = ''
    {{ .ExitShell }}
  '';
{{- end }}

{{- if .PreCommit }}
  # https://devenv.sh/pre-commit-hooks/
  pre-commit = {
{{- range $key, $value := .PreCommit }}
    {{ $key }} = {{ formatValue $value }};
{{- end }}
  };
{{- end }}

{{- if .Dotenv }}
  # https://devenv.sh/dotenv/
  dotenv = {
{{- range $key, $value := .Dotenv }}
    {{ $key }} = {{ formatValue $value }};
{{- end }}
  };
{{- end }}
}
`
